@model IEnumerable<MSIT147thGraduationTopic.Models.ViewModels.BrandVM>

@{
    Layout = "_BackstagePage";
    ViewData["Title"] = "品牌列表檢視";
    string txtKeyword = Context.Request.Cookies["txtKeyword"] ?? "";
    int searchCondition = int.TryParse(Context.Request.Cookies["searchCondition"], out int temp1) ? temp1 : 1;
    int PageIndex = int.TryParse(Context.Request.Cookies["PageIndex"], out int temp2) ? temp2 : 1;
    int displayorder = int.TryParse(Context.Request.Cookies["displayorder"], out int temp3) ? temp3 : 0;
    int displaymode = int.TryParse(Context.Request.Cookies["displaymode"], out int temp4) ? temp4 : 1;
    int pageSize = int.TryParse(Context.Request.Cookies["pageSize"], out int temp5) ? temp5 : 10;
}

<div class="container">
    <h1 class="title">品牌列表檢視</h1>
    <div style="float:right">
        <button id="demo_keyword" class="btn btn-outline-secondary mx-2">Demo 關鍵字</button>
        <button id="demo_noresult" class="btn btn-outline-secondary mx-2">Demo 無結果</button>
    </div>

    <div class="bg-light rounded shadow p-5">
        <div>
            @using (Html.BeginForm())
            {
                <div class="d-flex align-items-center">
                    <!-- 關鍵字搜尋 -->
                    <div class="form-group col-sm-5">
                        <div class="input-group mb-3">
                            <label class="input-group-text" for="search-input">關鍵字搜尋</label>
                            <input type="text" id="search-input" name="txtKeyword" class="form-control" aria-label="Text input with dropdown button">
                            <input type="submit" id="keywordsearch" value="Search" class="btn btn-secondary" />
                        </div>
                    </div>

                    <!-- 排序方式 -->
                    <div class="input-group mx-3">
                        <label class="input-group-text" for="displayorder">排序依據</label>
                        <select class="form-select" name="displayorder" id="displayorder" style="max-width:150px" aria-label="Floating label select example">
                            <option value="0">由新到舊</option>
                            <option value="1">由舊到新</option>
                            <option value="2">依名稱遞增</option>
                            <option value="3">依名稱遞減</option>
                        </select>
                    </div>
                </div>
            }
        </div>
        <!-- 按鈕 -->
        <div class="d-flex justify-content-between align-items-center mt-3">
            <p>
                @Html.ActionLink("新增品牌", "Create", "Brands", null, new { @class = "btn btn-primary" })
            </p>
            <p>
                @Html.ActionLink("回到商品檢視", "Index", "Merchandises", new { txtKeyword = txtKeyword, searchCondition = searchCondition,
                PageIndex = PageIndex, displayorder = displayorder, displaymode = displaymode, pageSize = pageSize }, new { @class = "btn btn-secondary" })
            </p>
        </div>
        <hr />
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>
                        檢視序號
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.BrandName)
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody id="showResult">
                @{
                    int count = 0;
                    foreach (var item in Model)
                    {
                        count++;
                        <tr>
                            <td>
                                @(count + 20 * (ViewBag.PageIndex - 1))
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.BrandName)
                            </td>
                            <td>
                                @Html.ActionLink("修改", "Edit", "Brands", new { id=item.BrandId }, new { @class = "btn btn-warning" }) 
                                <button class="btn btn-danger fordelete" data-brandid="@item.BrandId">刪除</button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>

        <!-- 分頁 -->
        <nav aria-label="Page navigation example ">
            <ul class="pagination justify-content-center mt-4 " id="pagingContainer">
                <!-- 透過Ajax產生分頁標籤 -->
            </ul>
        </nav>
    </div>
</div>

@section Scripts {
    <!-- DEMO按鈕 -->
    <script>
        $("#demo_keyword").on("click", (e) => {
            e.preventDefault();
            $("#search-input").val("貓");
        })
        $("#demo_noresult").on("click", (e) => {
            e.preventDefault();
            $("#search-input").val("Happy");
        })
    </script>
    <!-- 搜尋商品 -->
    <script>
        // #region 搜尋相關功能
        let txtKeyword = "@ViewBag.txtKeyword";
        let pageindex = @ViewBag.PageIndex;
        let displayorder = @ViewBag.displayorder;

        //設定初值呈現
        $(() => {
            $(`#displayorder > option[value=${displayorder}]`).attr("Selected", true);
        })

        //關鍵字
        $("#keywordsearch").on("click", (e) => {
            txtKeyword = $("#search-input").val();
            pageindex = 1;
            e.preventDefault();
            SearchBrands();
        });
        //排序方式
        $("#displayorder").on("change", (e) => {
            displayorder = $("#displayorder").val();
            pageindex = 1;
            SearchBrands();
        });

        //搜尋
        function SearchBrands() {
            window.location.href = `/Brands/Index/?txtKeyword=${txtKeyword}&PageIndex=${pageindex}&displayorder=${displayorder}`;
        };
        //#endregion

        $(async () => {
            // #region 產生分頁標籤
            const responseforlength = await fetch(`@Url.Content("~/ApiBrand/GetSearchResultLength/")?txtKeyword=${"@ViewBag.txtKeyword"}`);
            const returnLengthBag = await responseforlength.text();
            const resultLength = JSON.parse(returnLengthBag);
            const totalpage = Math.ceil(resultLength / 20);
            const pagingContainer = document.querySelector("#pagingContainer");

            let indexRow = `<li class="page-item border-light toPrevious">\
                                                <a class="page-link" href="#" aria-label="Previous">\
                                                    <span aria-hidden="true">&laquo;</span>\
                                                </a>\
                                            </li>`;
            let indexArray = "";
            let start, end;
            if (totalpage <= 5) {
                start = 1; end = totalpage;
                for (var i = start; i <= end; i++) {
                    indexArray += `<li class="page-item showIndex" val-index="${i}"><a class="page-link" href="#">${i}</a></li>`;
                }
            }
            if (totalpage > 5) {
                if (pageindex < 4) {
                    start = 1; end = 5;
                    for (var i = start; i <= end; i++) {
                        indexArray += `<li class="page-item showIndex" val-index="${i}"><a class="page-link" href="#">${i}</a></li>`;
                    }
                    indexArray += `<li class="page-item"><a class="page-link" >...</a></li>`
                }
                if (pageindex == 4) {
                    start = 2; end = 6;
                    for (var i = start; i <= end; i++) {
                        indexArray += `<li class="page-item showIndex" val-index="${i}"><a class="page-link" href="#">${i}</a></li>`;
                    }
                    indexArray += `<li class="page-item"><a class="page-link" >...</a></li>`
                }
                if (pageindex > 4) {
                    if (pageindex + 3 <= totalpage) {
                        start = pageindex - 2; end = parseInt(pageindex) + 2;//未轉型會默認為字串串接
                        indexArray += `<li class="page-item showIndex" val-index="1"><a class="page-link" href="#">1</a></li>`
                            + `<li class="page-item"><a class="page-link" >...</a></li>`
                        for (var i = start; i <= end; i++) {
                            indexArray += `<li class="page-item showIndex" val-index="${i}"><a class="page-link" href="#">${i}</a></li>`;
                        }
                        indexArray += `<li class="page-item"><a class="page-link" >...</a></li>`
                    }
                    if (pageindex + 3 > totalpage) {
                        start = pageindex - 2; end = totalpage;
                        indexArray += `<li class="page-item showIndex" val-index="1"><a class="page-link" href="#">1</a></li>`
                            + `<li class="page-item"><a class="page-link" >...</a></li>`
                        for (var i = start; i <= end; i++) {
                            indexArray += `<li class="page-item showIndex" val-index="${i}"><a class="page-link" href="#">${i}</a></li>`;
                        }
                    }
                }
            }

            indexRow += indexArray + `<li class="page-item toNext">
                                                        <a class="page-link" href="#" aria-label="Next">
                                                            <span aria-hidden="true">&raquo;</span>
                                                        </a>
                                                     </li>`;
            pagingContainer.innerHTML = indexRow;
            //#endregion

            // #region 分頁標籤按鈕
            //改變當前頁籤格式
            $(`[val-index=${pageindex}]`).attr("class", "page-item showIndex active");
            //分頁點選+點選後
            $(".showIndex").on("click", (e) => {
                pageindex = $(e.currentTarget).attr("val-index");
                SearchBrands();
            })
            //前後頁按鈕
            $(".toPrevious").on("click", () => {
                if (pageindex > 1) {
                    pageindex--;
                    SearchBrands();
                }
            })
            $(".toNext").on("click", () => {
                if (pageindex < totalpage) {
                    pageindex++;
                    SearchBrands();
                }
            })
            // #endregion

            // #region 查無符合資料
            if (resultLength == 0) {
                const showResult = document.querySelector("#showResult");
                showResult.innerHTML = "<h4>找不到符合的品牌</h4>";
            }
            // #endregion
        })

        // #region 刪除品牌
        $(".fordelete").click(async (e) => {
            //權限驗證
            if (!await validateRole('經理')) return
            //if (!confirm('確定刪除品牌嗎？')) return;
            Swal.fire({
                title: '確定刪除品牌嗎？',
                text: "** 刪除的資料無法復原！！**",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: '確定刪除',
                cancelButtonText: '取消！！',
                allowOutsideClick: false
            }).then((result) => {
                if (result.isConfirmed) {
                    const currentbrandid = $(e.currentTarget).attr("data-brandid");

                    const xhr = new XMLHttpRequest();
                    xhr.open("GET", `/ApiBrand/CheckMerchandiseforDeleteBrand/${currentbrandid}`);
                    xhr.send();

                    xhr.addEventListener("load", () => {
                        const data = JSON.parse(xhr.responseText);

                        if (data) {
                            //alert("品牌中尚有商品，因此無法刪除");
                            Swal.fire({
                                icon: 'error',
                                title: '刪除失敗',
                                text: '品牌下尚有商品！',
                                allowOutsideClick: false
                            })
                        }
                        else {
                            Swal.fire({
                                position: 'center',
                                icon: 'success',
                                title: '刪除成功！',
                                showConfirmButton: false,
                                timer: 800,
                                allowOutsideClick: false
                            }).then(() => {
                                window.location.href = `/Brands/Delete/${currentbrandid}`;
                            })
                        }
                    })
                }
            })
        })
                    // #endregion
    </script>
}

@section Styles{
    <style>
        .title {
            margin-top: 30px;
            margin-bottom: 10px;
        }
    </style>
}