@model IEnumerable<MSIT147thGraduationTopic.Models.ViewModels.SpecVM>

@{
    Layout = "_BackstagePage";
    ViewData["Title"] = "商品規格檢視";
    string txtKeyword = Context.Request.Cookies["txtKeyword"] ?? "";
    int searchCondition = int.TryParse(Context.Request.Cookies["searchCondition"], out int temp1) ? temp1 : 1;
    int PageIndex = int.TryParse(Context.Request.Cookies["PageIndex"], out int temp2) ? temp2 : 1;
    int displayorder = int.TryParse(Context.Request.Cookies["displayorder"], out int temp3) ? temp3 : 0;
    int displaymode = int.TryParse(Context.Request.Cookies["displaymode"], out int temp4) ? temp4 : 1;
    int pageSize = int.TryParse(Context.Request.Cookies["pageSize"], out int temp5) ? temp5 : 10;
}

<div class="container">
    <h1 class="title">商品規格檢視</h1>

    <div class="bg-light rounded shadow p-5">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>
                        商品名稱
                    </th>
                    <th>
                        品牌
                    </th>
                    <th>
                        商品類別
                    </th>
                    <th>
                        商品說明
                    </th>
                    <th>
                        商品圖片
                    </th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td id="mName" style="min-width:110px"></td>
                    <td id="mBrand" style="min-width:100px"></td>
                    <td id="mCategory" style="min-width:100px"></td>
                    <td id="mDescription"></td>
                    <td><img id="mImage" class="imgtumbnail" /></td>
                </tr>
            </tbody>
        </table>
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <p>
                @Html.ActionLink("新增商品規格", "Create", "Specs", new { merchandiseid = ViewBag.MerchandiseId }, new { @class = "btn btn-primary", style = "width: 130px" })
            </p>
            <!-- 排序方式 -->
            <div class="input-group mx-2" style="display: flex; justify-content: flex-end;">
                <label class="input-group-text" for="displayorder">排序依據</label>
                <select class="form-select" name="displayorder" id="displayorder" style="max-width:150px" aria-label="Floating label select example">
                    <option value="0">由新到舊</option>
                    <option value="1">由舊到新</option>
                    <option value="2">依名稱遞增</option>
                    <option value="3">依名稱遞減</option>
                    <option value="4">熱門度高至低</option>
                    <option value="5">熱門度低至高</option>
                </select>
            </div>
            <!-- 顯示是否上架 -->
            <div class="btn-group" id="selectDisplayMode" style="width:400px" role="group" aria-label="Basic radio toggle button group">
                <input type="radio" value="0" class="btn-check" name="btnradio" id="btnradio1" autocomplete="off">
                <label class="btn btn-outline-secondary" for="btnradio1">上架規格</label>

                <input type="radio" value="1" class="btn-check" name="btnradio" id="btnradio2" autocomplete="off">
                <label class="btn btn-outline-secondary" for="btnradio2">全部規格</label>

                <input type="radio" value="2" class="btn-check" name="btnradio" id="btnradio3" autocomplete="off">
                <label class="btn btn-outline-secondary" for="btnradio3">下架規格</label>
            </div>
        </div>
        <hr />
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>
                        檢視序號
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.SpecName)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Price)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Amount)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.ImageUrl)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.DiscountPercentage)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.DisplayOrder)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Popularity)
                    </th>
                    <th style="text-align:center">
                        @Html.DisplayNameFor(model => model.OnShelf)
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody id="showResult">
                @{
                    int count = 0;
                    foreach (var item in Model)
                    {
                        count++;
                        <tr>
                            <td>
                                @count
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.SpecName)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Price)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Amount)
                            </td>
                            <td>
                                @{ string imageurl = string.IsNullOrEmpty(item.ImageUrl) ? "default.png" : item.ImageUrl; }
                                <img src="@Url.Content("~/uploads/specPicture/" + imageurl)" class="imgtumbnail" />
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.DiscountPercentage)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.DisplayOrder)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Popularity)
                            </td>
                            <td style="text-align:center">
                                @Html.DisplayFor(modelItem => item.OnShelf)
                            </td>
                            <td>
                                @Html.ActionLink("修改", "Edit", "Specs", new { id=item.SpecId }, new { @class = "btn btn-warning" }) 
                                <button class="btn btn-success fortag" data-specid="@item.SpecId">管理標籤</button> 
                                <button class="btn btn-danger fordelete" data-specid="@item.SpecId">刪除</button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
        <div class="form-group">
            @Html.ActionLink("回到商品檢視", "Index", "Merchandises", new { txtKeyword = txtKeyword, searchCondition = searchCondition,
            PageIndex = PageIndex, displayorder = displayorder, displaymode = displaymode, pageSize = pageSize }, new { @class = "btn btn-secondary" })
        </div>
    </div>
</div>
<!-- Tag 管理頁 -->
<div class="modal fade" id="SpecTagModal" tabindex="-1" aria-labelledby="SpecTagModalLabel" aria-hidden="true">
    <div class="modal-dialog  modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-4 " id="SpecTagModalLabel">標籤管理</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="container-fluid">
                    <div class="row">
                        <div class="col-10 mx-auto">
                            <form name="AddTagForm">
                                <!-- 輸入Tag名稱 + AutoComplete -->
                                <div class="form-label mb-3">
                                    <label for="TagName" class="fw-bold">標籤名稱</label>
                                    <input class="form-control" id="TagName" type="text"/>
                                </div>
                                <div class="mt-2">
                                    <button type="button" class="btn btn-primary me-2" id="btnAddTag">新增標籤</button>
                                    <button id="demo" class="btn btn-outline-secondary btn-sm mx-2" style="float:right">Demo 新建標籤</button>
                                </div>
                                <div class="my-3" id="fastAddArea">
                                    
                                </div>
                            </form>
                            <hr />
                            <div class="row" id="currentTag">

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- DEMO按鈕 -->
    <script>
        //新增標籤
        $("#demo").on("click", (e) => {
            e.preventDefault();
            $("#TagName").val("寵物美容");
        })
    </script>
    <!-- 管理規格 -->
    <script>
        // #region 產生商品資料
        const mName = document.querySelector("#mName");
        const mBrand = document.querySelector("#mBrand");
        const mCategory = document.querySelector("#mCategory");
        const mDescription = document.querySelector("#mDescription");
        const mImage = document.querySelector("#mImage");

        $(() => {
            const merchandiseid = @ViewBag.MerchandiseId;
            const xhr = new XMLHttpRequest();
            xhr.open("GET", `/ApiSpec/ShowMerchandise/${merchandiseid}`);
            xhr.send();

            xhr.addEventListener("load", () => {
                const datas = JSON.parse(xhr.responseText);
                const merchandise = datas[0];
                mName.innerHTML = merchandise.merchandiseName;
                mBrand.innerHTML = merchandise.brandName;
                mCategory.innerHTML = merchandise.categoryName;
                mDescription.innerHTML = merchandise.description;
                mImage.src = (merchandise.imageUrl != null)
                    ? "@Url.Content("~/uploads/merchandisePicture/")" + merchandise.imageUrl
                    : "@Url.Content("~/uploads/merchandisePicture/default.png")";
            })
        })
        // #endregion

        // #region 排序 & 篩選功能
        //設定初值呈現
        let displayorder = @ViewBag.displayorder;
        let displaymode = @ViewBag.displaymode;
        $(() => {
            $(`#displayorder > option[value=${displayorder}]`).attr("Selected", true);
            $(`#selectDisplayMode > input[value=${displaymode}]`).attr("checked", true);
        })

        //變更排序方式
        $("#displayorder").on("change", (e) => {
            displayorder = $("#displayorder").val();
            pageindex = 1;
            SearchProducts();
        });
        //變更篩選
        $('#selectDisplayMode > input').on("click", (e) => {
            displaymode = $(e.currentTarget).val();
            pageindex = 1;
            SearchProducts();
        });

        //搜尋
        function SearchProducts() {
            window.location.href = `/Specs/Index/?merchandiseid=${merchandiseid}&displayorder=${displayorder}&displaymode=${displaymode}`;
        };
        // #endregion

        // #region 檢查符合資料數
        $(async () => {
            // #region 產生分頁標籤
            const responseforlength = await fetch(`@Url.Content("~/ApiSpec/GetSearchResultLength/")?merchandiseid=${@ViewBag.MerchandiseId}&displaymode=${@ViewBag.displaymode}`);
            const returnLengthBag = await responseforlength.text();
            const resultLength = JSON.parse(returnLengthBag);
            console.log(resultLength);
            if (resultLength == 0) {
                const showResult = document.querySelector("#showResult");
                showResult.innerHTML = '<h4 class="mt-4">找不到符合的規格</h4>';
            }
        })
        // #endregion

        // #region 確認刪除
        $(".fordelete").click(async (e) => {
            //權限驗證
            if (!await validateRole('經理')) return
            //if (!confirm('確定刪除規格嗎？')) return;
            Swal.fire({
                title: '確定刪除規格嗎？',
                text: `刪除的資料無法復原！！建議修改上架設定即可！`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: '確定刪除',
                cancelButtonText: '取消！！',
                allowOutsideClick: false
            }).then(async (result) => {
                if (result.isConfirmed) {
                    const currentspecid = $(e.currentTarget).attr("data-specid");
                    const responseDataLink = await fetch(`@Url.Content("~/ApiSpec/CheckDataLinkforDeleteSpec/")${currentspecid}`);
                    const returnDataLinkResult = await responseDataLink.text();
                    const hasDataLink = JSON.parse(returnDataLinkResult);

                    if (hasDataLink) {
                        Swal.fire({
                            icon: 'error',
                            title: '刪除失敗',
                            text: '規格尚與其他資料連結，無法刪除！',
                            allowOutsideClick: false
                        })
                    }
                    else {
                        Swal.fire({
                            position: 'center',
                            icon: 'success',
                            title: '刪除成功！',
                            showConfirmButton: false,
                            timer: 800,
                            allowOutsideClick: false
                        }).then(() => {
                            window.location.href = `/Specs/Delete/${currentspecid}`;
                        })
                    }                    
                }
            })
        })
        // #endregion
    </script>
    <!-- 管理標籤 -->
    <script>
        // #region 叫用標籤管理視窗 & AutoComplete功能
        const merchandiseid = @ViewBag.MerchandiseId;
        const SpecTagModal = new bootstrap.Modal(document.querySelector('#SpecTagModal'));
        let currentSpecId;

        $(".fortag").click(async (e) => {
            currentSpecId = $(e.currentTarget).attr("data-specid");
            $("#TagName").val("");
            SpecTagModal.show();
            ShowCurrentTag(currentSpecId);

            //設定AutoComplete選項
            const response2 = await fetch(`@Url.Content("~/ApiTag/AutoCompleteOptions")`);
            const jsonTagList = await response2.text();
            const TagList = JSON.parse(jsonTagList);

            let optionTags = [];
            TagList.forEach(tags => {
                optionTags.push(`${tags}`);
            });

            $("#TagName").autocomplete({
                source: optionTags, //因排版問題，無法展示候選字列表
                minLength: 1
            });
        })
        // #endregion

        // #region 新增標籤
        $("#btnAddTag").on("click", async (e) => {
            e.preventDefault();
            const tagName = $("#TagName").val();
            const response = await fetch(`@Url.Content("~/Specs/AddTag")`, {
                body: JSON.stringify({ 'tagName': tagName, 'specId': currentSpecId, 'merchandiseId': merchandiseid }),
                method: 'POST',
                headers: { 'Content-Type': 'application/json', },
            })
            $("#TagName").val("");
            //更新頁面以顯示變更
            ShowCurrentTag(currentSpecId);
            canEdit = true
        })
        //使用Enter送出
        $("#TagName").on("keypress", (e) => {
            var keyPressed = e.keyCode || e.which;
            if (keyPressed === 13) {
                e.preventDefault();
            }
        })
        //使用布林值作為指標，避免短時間內重複送出來不及驗證
        let canEdit = true;
        $("#TagName").on("keyup", (e) => {
            var keyPressed = e.keyCode || e.which;
            if (keyPressed === 13) {
                if (!canEdit) return
                canEdit = false;
                e.preventDefault();
                $("#btnAddTag").click();
            }
        })
        // #endregion

        // #region 產生快速標籤按鈕
        $(() => {
            const fastAddArea = document.querySelector("#fastAddArea");
            fastAddArea.innerHTML += `<span>快速標籤：</span>`;
            const TagNames = ["", "貓用", "狗用", "鼠用", "兔用"];
            for (let i = 1; i <= 4; i++) {
                fastAddArea.innerHTML += `<button class="btn btn-outline-secondary mx-1 fastAdd">${TagNames[i]}</button>`
            }
            $(".fastAdd").on("click", async (e) => {
                e.preventDefault();
                const tagName = $(e.currentTarget).text();
                const response = await fetch(`@Url.Content("~/Specs/AddTag")`, {
                    body: JSON.stringify({ 'tagName': tagName, 'specId': currentSpecId, 'merchandiseId': merchandiseid }),
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json', },
                })
                ShowCurrentTag(currentSpecId);
            })
        })
        // #endregion

        // #region 陳列既有標籤 & 刪除功能
        async function ShowCurrentTag(currentSpecId) {
            const currentTag = document.querySelector("#currentTag");
            const response = await fetch(`@Url.Content("~/ApiTag/CurrentTags/")${currentSpecId}`);
            const NameList = await response.text();
            const Names = JSON.parse(NameList);
            var names = Names.map(names => {
                const { specId, tagId, tagName } = names;
                return (`<span class="my-2">${tagName}<a class="deletetag" data-specid="${specId}" data-tagid="${tagId}" href="#"> &#9746;</a></span>`)
            });
            currentTag.innerHTML = `<tr>` + names.join("") + `</tr>`;

            //啟用刪除tag功能
            $(".deletetag").on("click", (e) => {
                Swal.fire({
                    title: '確定刪除這個標籤嗎？',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: '刪除',
                    cancelButtonText: '取消',
                    allowOutsideClick: false
                }).then((result) => {
                    if (result.isConfirmed) {
                        const currentSpecId = $(e.currentTarget).attr("data-specid");
                        const currenttagid = $(e.currentTarget).attr("data-tagid");
                        Swal.fire({
                            position: 'center',
                            icon: 'success',
                            title: '刪除成功！',
                            showConfirmButton: false,
                            timer: 600
                        }).then(async () => {
                            const response = await fetch(`@Url.Content("~/Specs/DeleteTag")`, {
                                body: JSON.stringify({ 'specId': currentSpecId, 'tagId': currenttagid, 'merchandiseId': merchandiseid }),
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json', },
                            })
                            ShowCurrentTag(currentSpecId);
                        })
                    }
                })
            })
        }
        // #endregion
    </script>
}

@section Styles{
    <style>
        .title {
            margin-top: 30px;
            margin-bottom: 10px;
        }

        .imgtumbnail {
            max-width: 70px;
            min-width: 70px;
        }

        a {
            text-decoration: none;
        }
    </style>
}