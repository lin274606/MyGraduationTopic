@model IEnumerable<MSIT147thGraduationTopic.Models.ViewModels.CategoryVM>

@{
    Layout = "_BackstagePage";
    ViewData["Title"] = "商品類別檢視";
    string txtKeyword = Context.Request.Cookies["txtKeyword"] ?? "";
    int searchCondition = int.TryParse(Context.Request.Cookies["searchCondition"], out int temp1) ? temp1 : 1;
    int PageIndex = int.TryParse(Context.Request.Cookies["PageIndex"], out int temp2) ? temp2 : 1;
    int displayorder = int.TryParse(Context.Request.Cookies["displayorder"], out int temp3) ? temp3 : 0;
    int displaymode = int.TryParse(Context.Request.Cookies["displaymode"], out int temp4) ? temp4 : 1;
    int pageSize = int.TryParse(Context.Request.Cookies["pageSize"], out int temp5) ? temp5 : 10;
}

<div class="container">
    <h1 class="title">商品類別檢視</h1>

    <div class="bg-light rounded shadow p-5">
        <div>
            @using (Html.BeginForm())
            {
                <div class="row">
                    <div class="form-group col-sm-5">
                        <div class="input-group mb-3">
                            <label class="input-group-text" for="searchCondition">關鍵字搜尋</label>
                            <input type="text" name="txtKeyword" class="form-control" aria-label="Text input with dropdown button">
                            <input type="submit" value="Search" class="btn btn-secondary" />
                        </div>
                    </div>
                </div>
            }
        </div>
        <div class="form-group" style="float:right">
            @Html.ActionLink("回到商品檢視", "Index", "Merchandises", new { txtKeyword = txtKeyword, searchCondition = searchCondition,
            PageIndex = PageIndex, displayorder = displayorder, displaymode = displaymode, pageSize = pageSize }, new { @class = "btn btn-secondary" })
        </div>
        <br />
        <p>
            @Html.ActionLink("新增商品類別", "Create", "Categories", null, new { @class = "btn btn-primary" })
        </p>
        <hr />
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>
                        檢視序號
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.CategoryName)
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @{
                    int count = 0;
                    foreach (var item in Model)
                    {
                        count++;
                        <tr>
                            <td>
                                @count
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.CategoryName)
                            </td>
                            <td>
                                @Html.ActionLink("修改", "Edit", "Categories", new { id=item.CategoryId }, new { @class = "btn btn-warning" })                             
                                <button class="btn btn-danger fordelete" data-categoryid="@item.CategoryId">刪除</button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

@section Scripts {
    <!-- 刪除類別 -->
    <script>
        $(".fordelete").click(async (e) => {
            //權限驗證
            if (!await validateRole('經理')) return
            //if (!confirm('確定刪除類別嗎？')) return;
            Swal.fire({
                title: '確定刪除類別嗎？',
                text: "** 刪除的資料無法復原！！**",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: '確定刪除',
                cancelButtonText: '取消！！',
                allowOutsideClick: false
            }).then((result) => {
                if (result.isConfirmed) {
                    const currentcategoryid = $(e.currentTarget).attr("data-categoryid");

                    const xhr = new XMLHttpRequest();
                    xhr.open("GET", `/ApiCategory/CheckMerchandiseforDeleteCategory/${currentcategoryid}`);
                    xhr.send();

                    xhr.addEventListener("load", () => {
                        const data = JSON.parse(xhr.responseText);
                        console.log(data);

                        if (data) {
                            //alert("類別中尚有商品，因此無法刪除");
                            Swal.fire({
                                icon: 'error',
                                title: '刪除失敗',
                                text: '類別中尚有商品！',
                                allowOutsideClick: false
                            })
                        }
                        else {
                            Swal.fire({
                                position: 'center',
                                icon: 'success',
                                title: '刪除成功！',
                                showConfirmButton: false,
                                timer: 800,
                                allowOutsideClick: false
                            }).then(() => {
                                window.location.href = `/Categories/Delete/${currentcategoryid}`;
                            })
                        }
                    })
                }
            })
        })
    </script>
}

@section Styles{
    <style>
        .title {
            margin-top: 30px;
            margin-bottom: 10px;
        }
    </style>
}
