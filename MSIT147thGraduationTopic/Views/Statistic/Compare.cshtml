@{
    ViewData["Title"] = "比較統計";
    Layout = "_BackstagePage";
}

<div class="container mt-5">

    <div class="p-4 bg-white rounded shadow ">
        <dov class="d-flex align-content-center">
            <h2 class="mt-3 ms-4" style="width:600px">商品比較圖</h2>
            <label for="inputTimeInterval" class="fs-4 mb-2 text-nowrap mx-4 my-auto">時間:</label>
            <div class="input-group my-auto">
                <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">時間間隔：<span id="spanTimeUnit">月</span></button>
                <ul class="dropdown-menu">
                    <li><button type="button" class="dropdown-item" id="btnWeek">星期</button></li>
                    <li><button type="button" class="dropdown-item" id="btnMonth">月</button></li>
                </ul>
                <button class="btn btn-outline-secondary px-3" type="button" id="btnSubTime">-</button>
                <input type="number" class="form-control text-center" value="12" id="inputTimeInterval">
                <button class="btn btn-outline-secondary px-3" type="button" id="btnAddTime">+</button>
            </div>

            <label for="selectMeasureUnit" class="fs-4 mb-2 text-nowrap mx-4 my-auto">單位:</label>

            <select class="form-select flex-fill my-auto" id="selectMeasureUnit">
                <option value="quantity" selected>購買數</option>
                <option value="profit">銷售額</option>
            </select>

        </dov>
        <div class="p-5  " style="position: relative; height:600px; width:100%">
            <canvas id="trendChart" style="width:100% ; height:100%"></canvas>
        </div>
        <div class="d-flex my-3">
            <button class="btn btn-sm btn-outline-secondary ms-auto" id="demoBtn1">demo 組合1</button>
            <button class="btn btn-sm btn-outline-secondary ms-2" id="demoBtn2">demo 組合2</button>
        </div>


        <div class="row">

            <div class="col-lg-6">
                <div class="m-1 border rounded p-4">

                    <div class="input-group">

                        <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">商品名稱</button>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item choose-type" onclick="leftMeasurement='merchandise'" data-search-type="merchandiseName">商品名稱</a></li>
                            <li><a class="dropdown-item choose-type" onclick="leftMeasurement='spec'" data-search-type="specName">規格名稱</a></li>
                            <li><a class="dropdown-item choose-type" onclick="leftMeasurement='merchandise'" data-search-type="merchandiseId">商品ID</a></li>
                            <li><a class="dropdown-item choose-type" onclick="leftMeasurement='spec'" data-search-type="specId">規格ID</a></li>
                        </ul>
                        <input type="text" class="form-control" data-search-type="merchandiseName" id="inputName1">
                        <button class="btn btn-dark px-4" type="button" id="btnLeft">確認</button>
                    </div>
                    <h4 class="mt-3"><span id="spanLeftName">請選擇對比商品</span>：</h4>
                    <div class="p-5  " style="position: relative; height:600px; width:100%">
                        <canvas id="leftRadar" style="width:100% ; height:100%"></canvas>
                    </div>

                </div>
            </div>


            <div class="col-lg-6">
                <div class="m-1 border rounded p-4">

                    <div class="input-group">
                        <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">商品名稱</button>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item choose-type" onclick="rightMeasurement='merchandise'" data-search-type="merchandiseName">商品名稱</a></li>
                            <li><a class="dropdown-item choose-type" onclick="rightMeasurement='spec'" data-search-type="specName">規格名稱</a></li>
                            <li><a class="dropdown-item choose-type" onclick="rightMeasurement='merchandise'" data-search-type="merchandiseId">商品ID</a></li>
                            <li><a class="dropdown-item choose-type" onclick="rightMeasurement='spec'" data-search-type="specId">規格ID</a></li>
                        </ul>
                        <input type="text" class="form-control" data-search-type="merchandiseName" id="inputName2">
                        <button class="btn btn-dark px-4" type="button" id="btnRight">確認</button>
                    </div>
                    <h4 class="mt-3"><span id="spanRightName">請選擇對比商品</span>：</h4>
                    <div class="p-5 " style="position: relative; height:600px; width:100%">
                        <canvas id="rightRadar" style="width:100% ; height:100%"></canvas>
                    </div>

                </div>

            </div>

        </div>
    </div>

</div>



@section Scripts{
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        const inputTimeInterval = document.getElementById('inputTimeInterval')

        let classification = 'quantity' // quantity profit
        let timeUnit = 'month' // month day
        let timeIntervals = 12

        let leftId = 0
        let leftMeasurement = "merchandise"
        let leftTrendData
        let leftRadarData

        let rightId = 0
        let rightMeasurement = "merchandise"
        let rightTrendData
        let rightRadarData


        //demoBtn1,2
        $('#demoBtn1').click(async e => {
            leftMeasurement = "merchandise"
            leftId = 31
            rightMeasurement = "merchandise"
            rightId = 24
            refreshTrendChart()
            refreshRadarData()
            const left = await getIdAndName("merchandiseId", leftId)
            $('#spanLeftName').text(left.name)
            const right = await getIdAndName("merchandiseId", rightId)
            $('#spanRightName').text(right.name)


        })
        $('#demoBtn2').click(async e => {
            leftMeasurement = "spec"
            leftId = 15
            rightMeasurement = "spec"
            rightId = 30
            refreshTrendChart()
            refreshRadarData()
            const left = await getIdAndName("specId", leftId)
            $('#spanLeftName').text(left.name)
            const right = await getIdAndName("specId", rightId)
            $('#spanRightName').text(right.name)
        })


        //trendChart
        const ctxTrend = document.getElementById('trendChart').getContext('2d');
        const trendChart = new Chart(ctxTrend, {
            type: 'line',
            data: {
                labels: [],
                datasets: []
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        })


        //leftRadar
        const ctxLeftRadar = document.getElementById('leftRadar').getContext('2d');
        const leftRadar = new Chart(ctxLeftRadar, {
            type: 'radar',
            data: {
                labels: ['歷史購買排名', '最近購買排名', '歷史評價排名', '最近評價排名', '購物車清單排名'],
                datasets: []
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    },
                },
                scales: {
                    r: {
                        min: 0,
                        max: 100,
                        pointLabels: {
                            font: {
                                size: 16
                            }
                        }
                    }
                },
                elements: {
                    line: {
                        borderWidth: 3
                    }
                }
            }
        })

        //rightRadar
        const ctxRightRadar = document.getElementById('rightRadar').getContext('2d');
        const rightRadar = new Chart(ctxRightRadar, {
            type: 'radar',
            data: {
                labels: ['歷史購買排名', '最近購買排名', '歷史評價排名', '最近評價排名', '購物車清單排名'],
                datasets: []
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    },
                },
                scales: {
                    r: {
                        min: 0,
                        max: 100,
                        pointLabels: {
                            font: {
                                size: 16,
                            },
                        },
                    },

                },
                elements: {
                    line: {
                        borderWidth: 3
                    }
                }
            }
        })


        //buttons
        $('#btnLeft').click(async e => {
            const keyword = e.currentTarget.closest('div').querySelector('input[type=text]').value.trim()
            if (!keyword) return
            const searchType = e.currentTarget.closest('div').querySelector('input[type=text]').dataset.searchType
            const { id, name } = await getIdAndName(searchType, keyword)
            if (!+id) return

            $('#spanLeftName').text(name)
            leftId = id

            leftTrendDataTask = getTrendData(leftMeasurement, leftId)
            leftRadarDataTask = getRadarData(leftMeasurement, leftId)
            const [res1, res2] = await Promise.all([leftTrendDataTask, leftRadarDataTask])
            leftTrendData = res1
            leftRadarData = res2

            displayTrendChart()
            displayRadarData()
        })
        $('#btnRight').click(async e => {
            const keyword = e.currentTarget.closest('div').querySelector('input[type=text]').value.trim()
            if (!keyword) return
            const searchType = e.currentTarget.closest('div').querySelector('input[type=text]').dataset.searchType
            const { id, name } = await getIdAndName(searchType, keyword)
            if (!+id) return
            $('#spanRightName').text(name)
            rightId = id
            rightTrendDataTask = getTrendData(rightMeasurement, rightId)
            rightRadarDataTask = getRadarData(rightMeasurement, rightId)
            const [res1, res2] = await Promise.all([rightTrendDataTask, rightRadarDataTask])
            rightTrendData = res1
            rightRadarData = res2

            displayTrendChart()
            displayRadarData()
        })

        //refreshTrendChart
        async function refreshTrendChart() {
            const taskLeft = getTrendData(leftMeasurement, leftId)
            const taskRight = getTrendData(rightMeasurement, rightId)
            const [resultLeft, resultRight] = await Promise.all([taskLeft, taskRight])
            leftTrendData = resultLeft
            rightTrendData = resultRight
            displayTrendChart()
        }


        //displaytrendChart
        async function displayTrendChart() {
            const leftData = (!!leftTrendData) ? JSON.parse(JSON.stringify(leftTrendData)) : null
            const rightData = (!!rightTrendData) ? JSON.parse(JSON.stringify(rightTrendData)) : null
            trendChart.data.labels = []
            trendChart.data.datasets = []
            if (!!leftData) {
                trendChart.data.labels = leftData.labels.slice(36 - timeIntervals)
                trendChart.data.datasets.push({
                    label: leftData.dataTitle,
                    data: leftData.datas.slice(36 - timeIntervals),
                    fill: false,
                    borderColor: 'rgb(255, 99, 132)',
                    tension: 0.1
                })
            }
            if (!!rightData) {
                trendChart.data.labels = rightData.labels.slice(36 - timeIntervals)
                trendChart.data.datasets.push({
                    label: rightData.dataTitle,
                    data: rightData.datas.slice(36 - timeIntervals),
                    fill: false,
                    borderColor: 'rgb(132, 132, 255)',
                    tension: 0.1
                })
            }
            trendChart.update()
        }

        //refreshRadarData
        async function refreshRadarData() {
            leftRadarDataTask = getRadarData(leftMeasurement, leftId)
            rightRadarDataTask = getRadarData(rightMeasurement, rightId)
            const [res1, res2] = await Promise.all([leftRadarDataTask, rightRadarDataTask])
            leftRadarData = res1
            rightRadarData = res2
            displayRadarData()
        }

        //displayRadarData
        async function displayRadarData() {
            const leftData = (!!leftRadarData) ? JSON.parse(JSON.stringify(leftRadarData)) : null
            const rightData = (!!rightTrendData) ? JSON.parse(JSON.stringify(rightRadarData)) : null
            //trendChart.data.labels = []
            leftRadar.data.datasets = []
            rightRadar.data.datasets = []
            if (!!leftData) {
                leftRadar.data.datasets.push({
                    label: '',
                    data: [leftData.boughtRank, leftData.recentBoughtRank, leftData.evaluationRank, leftData.recentEvaluationRank, leftData.inCartRank],
                    fill: true,
                    backgroundColor: 'rgba(255, 99, 132, 0.2)',
                    borderColor: 'rgb(255, 99, 132)',
                    pointBackgroundColor: 'rgb(255, 99, 132)',
                    pointBorderColor: '#fff',
                    pointHoverBackgroundColor: '#fff',
                    pointHoverBorderColor: 'rgb(255, 99, 132)'
                })
            }
            if (!!rightData) {
                rightRadar.data.datasets.push({
                    label: '',
                    data: [rightData.boughtRank, rightData.recentBoughtRank, rightData.evaluationRank, rightData.recentEvaluationRank, rightData.inCartRank],
                    fill: true,
                    backgroundColor: 'rgba(132, 132, 255, 0.2)',
                    borderColor: 'rgb(132, 132, 255)',
                    pointBackgroundColor: 'rgb(132, 132, 255)',
                    pointBorderColor: '#fff',
                    pointHoverBackgroundColor: '#fff',
                    pointHoverBorderColor: 'rgb(132, 132, 255)'
                })
            }
            leftRadar.update()
            rightRadar.update()
        }


        //取得對應ID
        async function getIdAndName(queryCol, keyword) {
            const response = await fetch(`${ROOT}/api/apistatistic/GetSearchedId?` + new URLSearchParams({
                "queryCol": queryCol,
                "keyword": keyword,
            }))
            if (response.ok) return await response.json()
            return -1
        }


        //取得趨勢data
        async function getTrendData(measurement, id) {
            if (!+id) return
            const response = await fetch(`${ROOT}/api/apistatistic/merchandisetrend?` +
                `measurement=${measurement}&classification=${classification}&timeUnit=${timeUnit}&id=${id}`)
            const data = await response.json()
            return data
        }
        //取得雷達data
        async function getRadarData(measurement, id) {
            if (!+id) return
            const response = await fetch(`${ROOT}/api/apistatistic/GetMerchandiseRadar?` +
                `measurement=${measurement}&id=${id}`)
            const data = await response.json()
            return data
        }


        //選擇搜尋型別
        $('a.choose-type').click(e => {
            const searchType = e.currentTarget.dataset.searchType
            const searchTypeName = e.currentTarget.innerText
            $(e.currentTarget).closest('.input-group').find('button.dropdown-toggle').text(searchTypeName)
            $(e.currentTarget).closest('.input-group').find('input[type=text]').attr('data-search-type', searchType)
        })

        //auto complete
        $('#inputName1,#inputName2').keyup(async e => {
            const thisInput = e.currentTarget
            const inputText = thisInput.value.trim()
            if (inputText.length < 1) return
            const searchType = thisInput.dataset.searchType
            console.log(searchType)
            const response = await fetch(`${ROOT}/api/apistatistic/GetAutoCompleteNames?` + new URLSearchParams({
                "queryCol": searchType,
                "keyword": inputText,
            }))
            const data = await response.json()
            $(thisInput).autocomplete({
                source: data,
                minLength: 1
            })
        })


        //conditions
        //selectMeasureUnit
        $('#selectMeasureUnit').change(e => {
            const val = $(e.currentTarget).val()
            classification = val
            refreshTrendChart()
        })

        //btnMonth
        $('#btnMonth').click(e => {
            timeUnit = 'month'
            $('#spanTimeUnit').text('月')
            refreshTrendChart()
        })
        //btnWeek
        $('#btnWeek').click(e => {
            timeUnit = 'day'
            $('#spanTimeUnit').text('星期')
            refreshTrendChart()
        })


        //inputTimeInterval
        inputTimeInterval.addEventListener('blur', e => {
            e.currentTarget.value = Math.max(e.currentTarget.value, 2)
            e.currentTarget.value = Math.min(e.currentTarget.value, 36)
            timeIntervals = +e.currentTarget.value
            displayTrendChart()
        })
        //btnSubTime
        $('#btnSubTime').click(e => {
            timeIntervals--
            validTimeIntervals()
            inputTimeInterval.value = timeIntervals
            displayTrendChart()
        })
        //btnAddTime
        $('#btnAddTime').click(e => {
            timeIntervals++
            validTimeIntervals()
            inputTimeInterval.value = timeIntervals
            displayTrendChart()
        })

        function validTimeIntervals() {
            if (isNaN(+timeIntervals)) timeIntervals = 6
            timeIntervals = Math.max(timeIntervals, 2)
            timeIntervals = Math.min(timeIntervals, 36)
        }

    </script>
}

@section Styles{
    <style>
        input::-webkit-outer-spin-button,
        input::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        /* Firefox */
        input[type=number] {
            -moz-appearance: textfield;
        }

    </style>
}

