// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace MSIT147thGraduationTopic.EFModels
{
    public partial class GraduationTopicContext : DbContext
    {
        public GraduationTopicContext()
        {
        }

        public GraduationTopicContext(DbContextOptions<GraduationTopicContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Brand> Brands { get; set; }
        public virtual DbSet<CartItem> CartItems { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Coupon> Coupons { get; set; }
        public virtual DbSet<CouponOwner> CouponOwners { get; set; }
        public virtual DbSet<CouponReceive> CouponReceives { get; set; }
        public virtual DbSet<District> Districts { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Evaluation> Evaluations { get; set; }
        public virtual DbSet<EvaluationInput> EvaluationInputs { get; set; }
        public virtual DbSet<MallDisplay> MallDisplays { get; set; }
        public virtual DbSet<ManuallyWeightedEntry> ManuallyWeightedEntries { get; set; }
        public virtual DbSet<Member> Members { get; set; }
        public virtual DbSet<Merchandise> Merchandises { get; set; }
        public virtual DbSet<MerchandiseSearch> MerchandiseSearches { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<OrderList> OrderLists { get; set; }
        public virtual DbSet<OrderWithMember> OrderWithMembers { get; set; }
        public virtual DbSet<PaymentMethod> PaymentMethods { get; set; }
        public virtual DbSet<RatingData> RatingDatas { get; set; }
        public virtual DbSet<Spec> Specs { get; set; }
        public virtual DbSet<SpecDisplayforOrder> SpecDisplayforOrders { get; set; }
        public virtual DbSet<SpecTag> SpecTags { get; set; }
        public virtual DbSet<SpecTagWithTagName> SpecTagWithTagNames { get; set; }
        public virtual DbSet<SpecWithFullMerchandise> SpecWithFullMerchandises { get; set; }
        public virtual DbSet<SpecWithMerchandiseName> SpecWithMerchandiseNames { get; set; }
        public virtual DbSet<SpecsInOrder> SpecsInOrders { get; set; }
        public virtual DbSet<Tag> Tags { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=GraduationTopic;Persist Security Info=True;User ID=sa6;Password=sa6");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Brand>(entity =>
            {
                entity.Property(e => e.BrandName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CartItem>(entity =>
            {
                entity.HasIndex(e => e.MemberId, "NonClusteredIndex-20230822-142741");

                entity.HasOne(d => d.Spec)
                    .WithMany(p => p.CartItems)
                    .HasForeignKey(d => d.SpecId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CartItems_Specs");
            });

            modelBuilder.Entity<Category>(entity =>
            {
                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<City>(entity =>
            {
                entity.Property(e => e.CityName)
                    .IsRequired()
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<Coupon>(entity =>
            {
                entity.Property(e => e.CouponCondition).HasColumnType("money");

                entity.Property(e => e.CouponDiscount).HasColumnType("money");

                entity.Property(e => e.CouponEndDate).HasColumnType("date");

                entity.Property(e => e.CouponName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CouponStartDate).HasColumnType("date");
            });

            modelBuilder.Entity<CouponOwner>(entity =>
            {
                entity.HasNoKey();

                entity.HasOne(d => d.Coupon)
                    .WithMany()
                    .HasForeignKey(d => d.CouponId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CouponOwners_Coupons");

                entity.HasOne(d => d.Member)
                    .WithMany()
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CouponOwners_Members");
            });

            modelBuilder.Entity<CouponReceive>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CouponReceive");

                entity.Property(e => e.CouponCondition).HasColumnType("money");

                entity.Property(e => e.CouponDiscount).HasColumnType("money");

                entity.Property(e => e.CouponEndDate).HasColumnType("date");

                entity.Property(e => e.CouponName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CouponStartDate).HasColumnType("date");
            });

            modelBuilder.Entity<District>(entity =>
            {
                entity.Property(e => e.DistrictName)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.HasOne(d => d.City)
                    .WithMany(p => p.Districts)
                    .HasForeignKey(d => d.CityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Districts_Cities");
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.Property(e => e.AvatarName).HasMaxLength(50);

                entity.Property(e => e.EmployeeAccount)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeeEmail)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EmployeeName)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.EmployeePassword)
                    .IsRequired()
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeePhone)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Salt)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Evaluation>(entity =>
            {
                entity.HasIndex(e => e.SpecId, "NonClusteredIndex-20230822-142915");

                entity.HasIndex(e => e.Score, "NonClusteredIndex-20230822-143025");

                entity.HasOne(d => d.Merchandise)
                    .WithMany(p => p.Evaluations)
                    .HasForeignKey(d => d.MerchandiseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Evaluations_Merchandises");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.Evaluations)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Evaluations_Orders");

                entity.HasOne(d => d.Spec)
                    .WithMany(p => p.Evaluations)
                    .HasForeignKey(d => d.SpecId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Evaluations_Specs");
            });

            modelBuilder.Entity<EvaluationInput>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("EvaluationInput");

                entity.Property(e => e.MerchandiseName)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SpecName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<MallDisplay>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MallDisplay");

                entity.Property(e => e.BrandName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CategoryId).HasColumnName("CategoryID");

                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(81);

                entity.Property(e => e.MerchandiseId).HasColumnName("MerchandiseID");

                entity.Property(e => e.MerchandiseImageUrl)
                    .HasMaxLength(150)
                    .HasColumnName("MerchandiseImageURL");

                entity.Property(e => e.MerchandiseName)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SpecImageUrl)
                    .HasMaxLength(150)
                    .HasColumnName("SpecImageURL");

                entity.Property(e => e.SpecName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ManuallyWeightedEntry>(entity =>
            {
                entity.HasKey(e => e.EntryId);

                entity.HasOne(d => d.Merchandise)
                    .WithMany(p => p.ManuallyWeightedEntries)
                    .HasForeignKey(d => d.MerchandiseId)
                    .HasConstraintName("FK_ManuallyWeightedEntries_Merchandises");

                entity.HasOne(d => d.Spec)
                    .WithMany(p => p.ManuallyWeightedEntries)
                    .HasForeignKey(d => d.SpecId)
                    .HasConstraintName("FK_ManuallyWeightedEntries_Specs");

                entity.HasOne(d => d.Tag)
                    .WithMany(p => p.ManuallyWeightedEntries)
                    .HasForeignKey(d => d.TagId)
                    .HasConstraintName("FK_ManuallyWeightedEntries_Tags");
            });

            modelBuilder.Entity<Member>(entity =>
            {
                entity.HasIndex(e => e.Account, "NonClusteredIndex-20230822-143133");

                entity.Property(e => e.Account)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Address).HasMaxLength(50);

                entity.Property(e => e.Avatar).HasMaxLength(100);

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.ConfirmGuid)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.DateOfBirth).HasColumnType("date");

                entity.Property(e => e.District).HasMaxLength(50);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MemberName)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.NickName).HasMaxLength(30);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Salt)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Merchandise>(entity =>
            {
                entity.HasIndex(e => e.BrandId, "NonClusteredIndex-20230822-143237");

                entity.HasIndex(e => e.CategoryId, "NonClusteredIndex-20230822-143327");

                entity.HasIndex(e => e.MerchandiseName, "NonClusteredIndex-20230822-143957");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ImageUrl)
                    .HasMaxLength(150)
                    .HasColumnName("ImageURL");

                entity.Property(e => e.MerchandiseName)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.HasOne(d => d.Brand)
                    .WithMany(p => p.Merchandises)
                    .HasForeignKey(d => d.BrandId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Merchandises_Brands");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Merchandises)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Merchandise_Category");
            });

            modelBuilder.Entity<MerchandiseSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MerchandiseSearch");

                entity.Property(e => e.BrandName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ImageUrl)
                    .HasMaxLength(150)
                    .HasColumnName("ImageURL");

                entity.Property(e => e.MerchandiseId).HasColumnName("MerchandiseID");

                entity.Property(e => e.MerchandiseName)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.HasIndex(e => e.MemberId, "NonClusteredIndex-20230822-143546");

                entity.Property(e => e.ContactPhoneNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryAddress)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.DeliveryCity)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.DeliveryDistrict)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.PurchaseTime).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(300);

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Orders_Member");

                entity.HasOne(d => d.PaymentMethod)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.PaymentMethodId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Orders_PaymentMethods");
            });

            modelBuilder.Entity<OrderList>(entity =>
            {
                entity.HasIndex(e => e.SpecId, "NonClusteredIndex-20230822-143408");

                entity.HasIndex(e => e.OrderId, "NonClusteredIndex-20230822-143434");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderLists)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderList_Orders");

                entity.HasOne(d => d.Spec)
                    .WithMany(p => p.OrderLists)
                    .HasForeignKey(d => d.SpecId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderLists_Specs");
            });

            modelBuilder.Entity<OrderWithMember>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("OrderWithMember");

                entity.Property(e => e.PaymentMethodName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PurchaseTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<PaymentMethod>(entity =>
            {
                entity.Property(e => e.PaymentMethodId).ValueGeneratedNever();

                entity.Property(e => e.PaymentMethodName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<RatingData>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<Spec>(entity =>
            {
                entity.HasIndex(e => e.SpecId, "NonClusteredIndex-20230822-143816");

                entity.HasIndex(e => e.Popularity, "NonClusteredIndex-20230822-143859");

                entity.Property(e => e.ImageUrl)
                    .HasMaxLength(150)
                    .HasColumnName("ImageURL");

                entity.Property(e => e.SpecName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Merchandise)
                    .WithMany(p => p.Specs)
                    .HasForeignKey(d => d.MerchandiseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Specs_Merchandises");
            });

            modelBuilder.Entity<SpecDisplayforOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SpecDisplayforOrder");

                entity.Property(e => e.BrandName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(81);
            });

            modelBuilder.Entity<SpecTag>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.SpecId, "ClusteredIndex-20230822-144112")
                    .IsClustered();

                entity.HasIndex(e => e.TagId, "NonClusteredIndex-20230822-144129");

                entity.HasOne(d => d.Spec)
                    .WithMany()
                    .HasForeignKey(d => d.SpecId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SpecTags_Specs");

                entity.HasOne(d => d.Tag)
                    .WithMany()
                    .HasForeignKey(d => d.TagId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SpecTags_Tags");
            });

            modelBuilder.Entity<SpecTagWithTagName>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SpecTagWithTagName");

                entity.Property(e => e.TagName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SpecWithFullMerchandise>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SpecWithFullMerchandise");

                entity.Property(e => e.BrandName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ImageUrl)
                    .HasMaxLength(150)
                    .HasColumnName("ImageURL");

                entity.Property(e => e.MerchandiseId).HasColumnName("MerchandiseID");

                entity.Property(e => e.MerchandiseName)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SpecName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SpecWithMerchandiseName>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SpecWithMerchandiseName");

                entity.Property(e => e.MerchandiseId).HasColumnName("MerchandiseID");

                entity.Property(e => e.MerchandiseName)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SpecName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SpecsInOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SpecsInOrder");

                entity.Property(e => e.MerchandiseId).HasColumnName("MerchandiseID");

                entity.Property(e => e.MerchandiseName)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.SpecName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Tag>(entity =>
            {
                entity.Property(e => e.TagName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}